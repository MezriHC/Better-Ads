generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  projects      Project[]
  avatars       Avatar[]
}

model Project {
  id        String   @id @default(cuid())
  name      String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  avatars Avatar[]

  @@index([userId])
  @@index([createdAt])
}

// Enums pour les avatars
enum AvatarType { 
  PUBLIC 
  PRIVATE 
}

enum AvatarStatus { 
  PENDING 
  SUCCEEDED 
  FAILED 
}

enum TagCategory { 
  SEXE 
  AGE 
  INDUSTRIE 
}

// Mod√®le Avatar selon Plan.md
model Avatar {
  id        String   @id @default(cuid())
  name      String
  type      AvatarType
  status    AvatarStatus

  // ID du job chez le fournisseur IA, pour le suivi via webhook
  falRequestId String? @unique

  // Chemins finaux dans notre bucket MinIO
  videoStoragePath String?
  imageStoragePath String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String?  // null pour les avatars publics

  project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String?  // null pour les avatars publics

  tags      Tag[]    // Uniquement pour les avatars publics

  @@index([userId])
  @@index([projectId])
  @@index([type])
  @@index([status])
}

model Tag {
  id        String      @id @default(cuid())
  name      String
  category  TagCategory
  avatars   Avatar[]
  
  @@unique([name, category])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

