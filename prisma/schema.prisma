generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String             @id @default(cuid())
  name             String?
  email            String?            @unique
  emailVerified    DateTime?
  image            String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  accounts         Account[]
  avatars          Avatar[]
  AvatarGeneration AvatarGeneration[]
  BRoll            BRoll[]
  GeneratedImage   GeneratedImage[]
  projects         Project[]
  sessions         Session[]
}

model Project {
  id        String   @id @default(cuid())
  name      String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  avatars   Avatar[]
  BRoll     BRoll[]
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([createdAt])
}

model Avatar {
  id               String             @id @default(cuid())
  name             String
  imageUrl         String
  videoUrl         String?
  visibility       String
  status           String
  userId           String?
  projectId        String?
  falImageJobId    String?
  falVideoJobId    String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  description      String?
  duration         String?
  format           String?
  minioImagePath   String?
  minioVideoPath   String?
  prompt           String?
  resolution       String?
  project          Project?           @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user             User?              @relation(fields: [userId], references: [id], onDelete: Cascade)
  AvatarGeneration AvatarGeneration[]
  GeneratedImage   GeneratedImage[]
  Tag              Tag[]              @relation("AvatarTags")

  @@index([projectId])
  @@index([userId])
  @@index([visibility, status])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model AvatarGeneration {
  id             String         @id
  userId         String
  sourceImageId  String
  originalPrompt String
  videoPrompt    String?
  sessionId      String
  avatarName     String?
  falVideoJobId  String?
  falStatus      String?
  falProgress    Int?
  avatarId       String?
  minioVideoPath String?
  status         String
  errorMessage   String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime
  Avatar         Avatar?        @relation(fields: [avatarId], references: [id])
  GeneratedImage GeneratedImage @relation(fields: [sourceImageId], references: [id])
  User           User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([createdAt])
  @@index([sessionId])
  @@index([status])
  @@index([userId])
}

model BRoll {
  id                  String   @id
  name                String
  prompt              String
  imageUrl            String?
  videoUrl            String?
  thumbnailUrl        String?
  status              String
  type                String
  userId              String
  projectId           String
  falJobId            String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  aspectRatio         String?
  cameraFixed         Boolean? @default(false)
  duration            String?
  enableSafetyChecker Boolean? @default(true)
  format              String?
  minioVideoPath      String?
  resolution          String?
  seed                BigInt?
  visibility          String   @default("private")
  Project             Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  User                User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([type, status])
  @@index([userId])
  @@index([visibility, status])
}

model GeneratedImage {
  id               String             @id
  prompt           String
  minioPath        String
  sessionId        String
  userId           String
  seed             BigInt?
  aspectRatio      String
  falJobId         String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime
  avatarId         String?
  AvatarGeneration AvatarGeneration[]
  Avatar           Avatar?            @relation(fields: [avatarId], references: [id])
  User             User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([avatarId])
  @@index([createdAt])
  @@index([sessionId])
  @@index([userId])
}

model Tag {
  id          String      @id
  name        String
  slug        String      @unique
  categoryId  String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime
  TagCategory TagCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  Avatar      Avatar[]    @relation("AvatarTags")

  @@unique([categoryId, slug])
}

model TagCategory {
  id        String   @id
  name      String   @unique
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime
  Tag       Tag[]
}
