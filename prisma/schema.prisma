// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  projects      Project[]
  avatars       Avatar[]
  videos        Video[]
}

model Project {
  id        String   @id @default(cuid())
  name      String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  avatars Avatar[]
  videos  Video[]

  @@index([userId])
  @@index([createdAt])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Catégories de tags (âge, genre, thème)
model TagCategory {
  id    String @id @default(cuid())
  label String
  slug  String @unique

  tags Tag[] @relation("CategoryTags")
}

// Tags spécifiques (homme, jeune adulte, médical, etc.)
model Tag {
  id         String      @id @default(cuid())
  label      String
  slug       String      @unique
  categoryId String
  category   TagCategory @relation("CategoryTags", fields: [categoryId], references: [id])

  avatars Avatar[] @relation("AvatarTags")

  @@index([categoryId])
}

// Avatars (publics et privés)
model Avatar {
  id         String   @id @default(cuid())
  title      String
  videoUrl   String
  posterUrl  String
  visibility String   // 'public' ou 'private'
  userId     String?
  projectId  String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  status     String   // 'ready', 'processing', 'failed'
  metadata   Json?

  user    User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  project Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tags    Tag[]    @relation("AvatarTags")
  videos  Video[]

  @@index([userId])
  @@index([projectId])
  @@index([visibility, status])
}

// Vidéos générées
model Video {
  id           String   @id @default(cuid())
  userId       String
  avatarId     String?
  videoUrl     String
  thumbnailUrl String
  status       String   // 'queued', 'processing', 'ready', 'failed'
  scriptText   String
  ttsVoiceId   String
  projectId    String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  avatar  Avatar?  @relation(fields: [avatarId], references: [id])
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  project Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([projectId])
  @@index([status])
}