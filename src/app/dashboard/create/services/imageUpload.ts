/**
 * Service d'upload d'images TEMPORAIRE
 * Workflow CORRECT : Image reste en m√©moire jusqu'√† g√©n√©ration r√©ussie
 * Ensuite image + vid√©o upload√©es ENSEMBLE dans MinIO
 */

export interface ImageUploadResult {
  displayUrl: string; // URL temporaire pour affichage frontend (blob ou base64)
  originalFile: File; // Fichier original √† utiliser pour g√©n√©ration + stockage final
}

/**
 * Pr√©pare une image pour l'affichage et la g√©n√©ration d'avatar
 * L'image n'est PAS upload√©e vers MinIO imm√©diatement
 * @param file - Fichier image s√©lectionn√©
 * @returns R√©sultat avec URL temporaire et fichier original
 */
export async function prepareImageForAvatar(file: File): Promise<ImageUploadResult | null> {
  try {
    console.log('üñºÔ∏è Pr√©paration image pour avatar:', file.name, file.type);

    // Validation du fichier
    if (!file.type.startsWith('image/')) {
      throw new Error('Le fichier doit √™tre une image');
    }

    if (file.size > 10 * 1024 * 1024) { // 10MB max
      throw new Error('La taille du fichier ne peut pas d√©passer 10MB');
    }

    // Cr√©er une URL temporaire pour l'affichage (Object URL)
    const displayUrl = URL.createObjectURL(file);
    
    console.log('‚úÖ Image pr√©par√©e pour g√©n√©ration d\'avatar');

    return {
      displayUrl, // URL blob temporaire pour affichage
      originalFile: file // Fichier original pour g√©n√©ration + stockage final
    };

  } catch (error) {
    console.error('‚ùå Erreur pr√©paration image:', error);
    return null;
  }
}

/**
 * Nettoie l'URL temporaire quand elle n'est plus n√©cessaire
 * @param displayUrl - URL blob √† nettoyer
 */
export function cleanupImageUrl(displayUrl: string) {
  if (displayUrl.startsWith('blob:')) {
    URL.revokeObjectURL(displayUrl);
    console.log('üßπ URL temporaire nettoy√©e');
  }
}